{"version":3,"file":"static/js/742.228b9db2.chunk.js","mappings":"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","sources":["components/Header/index.jsx","pages/Signin/signin.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Img, Input, Text } from \"components\";\n\nimport { CloseSVG } from \"../../assets/images\";\nimport { Link, NavLink } from \"react-router-dom\";\n// import { useLocation } from \"react-router-dom\";\nimport { BiSearch } from \"react-icons/bi\";\n\nconst Header = ({ children }) => {\n  const [framesixvalue, setFramesixvalue] = React.useState(\"\");\n  const [openNav, setOpenNav] = useState(false);\n  const [userData, setUserData] = useState();\n\n  // const location = useLocation();\n\n  useEffect(() => {\n    const userDataParam = localStorage.getItem('userData');\n    if (userDataParam) {\n      const parsedUserData = JSON.parse(userDataParam);\n      setUserData(parsedUserData);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"\">\n        <header className=\" flex justify-around md:justify-between items-center py-3 md:py-5 w-full\">\n          <div className=\"flex flex-col gap-[5px] mx-6 items-center md:mt-0 my-[7px] w-[5rem]\">\n          <a href=\"/\">\n            <Img\n              className=\"h-[43px] md:h-auto object-cover w-[4rem] \"\n              src=\"images/img_image3.png\"\n              alt=\"imageThree\"\n            />\n            <Text\n              className=\"text-[7.39px] text-teal-A400\"\n              size=\"txtPromptSemiBold739\"\n            >\n              SENCHAT\n            </Text>\n            </a>\n          </div>\n          <ul className=\"flex md:hidden justify-between items-center gap-2\">\n            \n          </ul>\n\n\n        </header>\n            \n\n        <div className=\"\">{children}</div>\n      </div>\n    </>\n  );\n};\n\nHeader.defaultProps = {};\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Img, Text } from \"components\";\nimport Header from \"components/Header/index\";\nimport ContractABI from '../../utils/contractabi.json';\nimport { ConnectButton, useAccount, useParticleProvider } from '@particle-network/connect-react-ui';\nimport '@particle-network/connect-react-ui/dist/index.css';\nimport { isEVMProvider } from '@particle-network/connect';\nimport Web3 from 'web3';\nimport { sha256 } from 'js-sha256';\n\n\n\nconst Signin = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [rpc, setRpc] = useState();\n  const nftcontract = process.env.REACT_APP_NFTCONTRACT;\n  const [isConnected, setIsConnected] = useState();\n  const [errMessage, seterrMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const history = useNavigate();\n\n\n  const account = useAccount();\n  const provider = useParticleProvider();\n  console.log(provider);\n\n  useEffect(() => {\n    if (provider && isEVMProvider(provider)) {\n      window.web3 = new Web3(provider);\n    }\n  }, [provider]);\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (account) {\n          setIsConnected(true);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n\n  }, [account]);\n\n\n  const hashAccount = (account) => {\n    const hashedAccount = sha256(account.toString());\n    return hashedAccount;\n  };\n\n  const extractDigits = (text) => {\n    const numericalCharacters = text.match(/\\d/g);\n    if (!numericalCharacters) return '';\n    return numericalCharacters.join('');\n  };\n\n  const getFirst10Digits = (text) => {\n    return text.substring(0, 10);\n  };\n\n  const connectToWeb3 = async () => {\n    setIsLoading(true);\n\n    if (!account) {\n      setIsConnected(false);\n      seterrMessage('Account Not Connected');\n      return;\n    }\n\n    const hashedAccount = hashAccount(account);\n    const numericalCharacters = extractDigits(hashedAccount);\n    const big = getFirst10Digits(numericalCharacters);\n\n    try {\n      const url = await new window.web3.eth.Contract(ContractABI, nftcontract)\n        .methods.tokenURI(`1${big}`)\n        .call();\n      const hash = url.replace('ipfs://', '');\n      const cloudflareUrl = `https://cloudflare-ipfs.com/ipfs/${hash}`;\n\n      const response = await fetch(cloudflareUrl);\n\n      if (!response.ok) {\n        seterrMessage(`Failed to fetch from your data`);\n        throw new Error(`Failed to fetch from IPFS. Status: ${response.status}`);\n      }\n\n      const userData = await response.json();\n\n      localStorage.setItem('userData', JSON.stringify(userData));\n      setSuccessMessage(`connected succesfully`);\n      setIsLoading(false);\n      history(`/education`, { replace: true });\n\n    } catch (error) {\n      setIsLoading(false);\n      console.error(error);\n      // seterrMessage(`Failed to fetch from IPFS. Status: ${response.status}`); \n      seterrMessage('Account Do not Exist and try to signup');\n    }\n\n\n\n  }\n  return (\n    <>\n      <div className=\"bg-gray-100 flex flex-col font-prompt gap-11 items-end justify-start mx-auto w-full\">\n        <div className=\"flex flex-col items-center w-full\">\n          <Header className=\"bg-white-A700 flex flex-col items-center justify-center md:px-5 w-full\" />\n        </div>\n        <div className=\"bg-white-A700 flex flex-col gap-[27px] items-center justify-start p-[33px] md:px-5 rounded-bl-[70px] rounded-tl-[70px] w-[63%] md:w-full\">\n          <div className=\"flex flex-col gap-[5px] items-center justify-start w-[7%] md:w-full\">\n            <Img\n              className=\"h-[43px] md:h-auto object-cover w-full\"\n              src=\"images/img_image3.png\"\n              alt=\"imageThree_One\"\n            />\n            <Text\n              className=\"text-[7.39px] text-teal-A400\"\n              size=\"txtPromptSemiBold739\"\n            >\n              SENCHAT\n            </Text>\n          </div>\n          <div className=\"flex flex-col gap-[45.5px] items-center justify-start w-auto sm:w-full\">\n            <div className=\"flex flex-col gap-[18.2px] items-center justify-start w-auto sm:w-full\">\n              <Text\n                className=\"sm:text-[32.4px] md:text-[34.4px] text-[36.4px] text-black-900 w-auto\"\n                size=\"txtPromptSemiBold364\"\n              >\n                Welcome back\n              </Text>\n              <Text\n                className=\"text-[18.2px] text-gray-600 tracking-[0.18px] w-auto\"\n                size=\"txtPromptRegular182\"\n              >\n                Welcome back! Please connect your wallet.\n              </Text>\n            </div>\n\n            <ConnectButton.Custom>\n              {({ account, chain, openAccountModal, openConnectModal, openChainModal }) => {\n                if (chain) {\n                  if (chain.rpcUrl === process.env.REACT_APP_RPC) {\n                    setRpc(true);\n                    setIsConnected(true);\n                  } else {\n                    setRpc(false);\n                    setIsConnected(false);\n                  }\n                } else {\n                  setIsConnected(false);\n                }\n\n                return (\n                  <div>\n                    {!account && (\n                      <Button\n                        onClick={openConnectModal}\n                        className=\"justify-start bg-teal-A400 cursor-pointer font-medium leading-[normal] w-[150%] py-[19px] rounded-[32px] text-[17.51px] text-black-900 text-center\"\n                      >\n                        Connect to web3\n                      </Button>\n                    )}\n                    {account && (\n                      <div className=\"flex justify-start\">\n                        <Button\n                          onClick={openAccountModal}\n                          className=\"bg-teal-A400 cursor-pointer font-medium leading-[normal] min-w-[50%] py-[19px] rounded-[32px] text-[17.51px] text-black-900 text-center\"\n                        >\n                          {`${account.slice(0, 10)}...${account.slice(-5)}`}\n                        </Button>\n\n                        <Button\n                          onClick={openChainModal}\n                          className=\"bg-teal-A400 cursor-pointer font-medium leading-[normal] min-w-[30%] py-[19px] rounded-[32px] text-[17.51px] text-black-900 text-center ml-8\"\n                        >\n                          {rpc ? (\n                            \"Network Connected\"\n                          ) : (\n                            \"Wrong Network\"\n                          )}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n\n                );\n\n              }}\n            </ConnectButton.Custom>\n            {isConnected && (\n              <Button\n                onClick={connectToWeb3}\n                className=\"bg-teal-A400 cursor-pointer font-medium leading-[normal] min-w-full py-[19px] rounded-[32px] text-[17.51px] text-black-900 text-center bg-green-500\" // Add your desired class for when connected\n              >\n                 {isLoading ? (\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-t-2 border-b-2 border-gray-900\"></div>\n                    </div>\n                  ) : (\n                    'Verify and Sign in'\n                  )}\n              </Button>\n            )}\n            {errMessage && (\n              <div className=\"text-red-600\">{errMessage}</div>\n            )}\n\n            <div className=\"flex flex-col gap-11 items-center justify-start w-full\">\n\n              <div className=\"flex flex-col gap-[22.75px] items-start justify-start w-auto sm:w-full\">\n                {successMessage && (\n                  <div className=\"text-green-600\">{successMessage}</div>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex flex-row font-roboto gap-[4.55px] items-center justify-start mb-[59px] w-auto\">\n            <Text\n              className=\"text-[15.93px] text-gray-600 w-auto\"\n              size=\"txtRobotoRomanMedium1593\"\n            >\n              Don’t have an account?{\" \"}\n            </Text>\n            <a\n              href=\"/signup\"\n              className=\"text-[15.93px] text-teal-A400 w-auto\"\n            >\n              <Text size=\"txtRobotoRomanMedium1593TealA400\">Sign up</Text>\n            </a>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Signin;\n"],"names":["Header","_ref","children","framesixvalue","setFramesixvalue","React","openNav","setOpenNav","useState","userData","setUserData","useEffect","userDataParam","localStorage","getItem","parsedUserData","JSON","parse","_jsx","_Fragment","_jsxs","className","href","Img","src","alt","Text","size","defaultProps","Signin","isLoading","setIsLoading","rpc","setRpc","isConnected","setIsConnected","errMessage","seterrMessage","successMessage","setSuccessMessage","history","useNavigate","account","useAccount","provider","useParticleProvider","console","log","isEVMProvider","window","web3","Web3","async","error","fetchData","ConnectButton","Custom","chain","openAccountModal","openConnectModal","openChainModal","process","rpcUrl","Button","onClick","concat","slice","hashedAccount","sha256","toString","hashAccount","numericalCharacters","text","match","join","extractDigits","big","substring","hash","eth","Contract","ContractABI","methods","tokenURI","call","replace","cloudflareUrl","response","fetch","ok","Error","status","json","setItem","stringify"],"sourceRoot":""}