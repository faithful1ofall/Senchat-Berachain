{"version":3,"file":"static/js/105.94cee9cf.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/utils.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/ed25519.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/error.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/utils.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/struct.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/utilities.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/types.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/coercions.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@solana/web3.js/node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@particle-network/solana-wallet/src/solana-wallet.ts","../node_modules/@particle-network/solana-wallet/src/utils.ts","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nvar _utils = require(\"./utils\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// @ts-ignore\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n  var _super = _createSuper(CommonClient);\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    var dataPack = arguments.length > 4 ? arguments[4] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n    var _a$autoconnect = _a.autoconnect,\n      autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n      _a$reconnect = _a.reconnect,\n      reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n      _a$reconnect_interval = _a.reconnect_interval,\n      reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n      _a$max_reconnects = _a.max_reconnects,\n      max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n      rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n    if (!dataPack) _this.dataPack = new _utils.DefaultDataPack();else _this.dataPack = dataPack;\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n        var rpc_id = _this2.generate_request_id(method, params);\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || undefined,\n          id: rpc_id\n        };\n        _this2.socket.send(_this2.dataPack.encode(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n              case 2:\n                resp = _context.sent;\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"authentication failed\");\n              case 5:\n                return _context.abrupt(\"return\", resp);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params\n        };\n        _this3.socket.send(_this3.dataPack.encode(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n              case 3:\n                result = _context3.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n              case 6:\n                return _context3.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n              case 3:\n                result = _context4.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n              case 6:\n                return _context4.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n        _this4.emit(\"open\");\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n        try {\n          message = _this4.dataPack.decode(message);\n        } catch (error) {\n          return;\n        }\n        // check if any listeners are attached and forward event\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else\n            // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            }\n          // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message === null || message === void 0 ? void 0 : message.params);\n            });\n          }\n          return;\n        }\n        // reject early since server's response is invalid\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n          reason = _ref2.reason;\n        if (_this4.ready)\n          // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n  var _super = _createSuper(WebSocketBrowserImpl);\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultDataPack = void 0;\nexports.createError = createError;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar errors = new Map([[-32000, \"Event not provided\"], [-32600, \"Invalid Request\"], [-32601, \"Method not found\"], [-32602, \"Invalid params\"], [-32603, \"Internal error\"], [-32604, \"Params not found\"], [-32605, \"Method forbidden\"], [-32606, \"Event forbidden\"], [-32700, \"Parse error\"]]);\nvar DefaultDataPack = /*#__PURE__*/function () {\n  function DefaultDataPack() {\n    (0, _classCallCheck2[\"default\"])(this, DefaultDataPack);\n  }\n  (0, _createClass2[\"default\"])(DefaultDataPack, [{\n    key: \"encode\",\n    value: function encode(value) {\n      return JSON.stringify(value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(value) {\n      return JSON.parse(value);\n    }\n  }]);\n  return DefaultDataPack;\n}();\n/**\n * Creates a JSON-RPC 2.0-compliant error.\n * @param {Number} code - error code\n * @param {String} details - error details\n * @return {Object}\n */\nexports.DefaultDataPack = DefaultDataPack;\nfunction createError(code, details) {\n  var error = {\n    code: code,\n    message: errors.get(code) || \"Internal Server Error\"\n  };\n  if (details) error[\"data\"] = details;\n  return error;\n}","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : String(i);\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    if (!isBytes(a)) throw new Error('Uint8Array expected');\n    sum += a.length;\n  }\n  let res = new Uint8Array(sum);\n  let pad = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint, Group } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!ut.isBytes(data)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { Auth, LoginOptions, UserInfo, rpcUrl } from '@particle-network/auth';\nimport { Connection, ConnectionConfig, PublicKey, Transaction } from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\nimport { EventEmitter } from 'events';\nimport { ISolanaWallet } from './types';\nimport { getVersion } from './utils';\n\nexport class SolanaWallet implements ISolanaWallet {\n    public readonly isParticleNetwork = true;\n\n    name = 'Particle';\n    url = 'https://particle.network';\n    icon = 'https://static.particle.network/wallet-icons/Particle.png';\n\n    private _publicKey: PublicKey | null;\n\n    private _connecting: boolean;\n\n    private events = new EventEmitter();\n\n    constructor(private auth: Auth) {\n        this.auth = auth;\n        this._connecting = false;\n\n        const userInfo = this.auth.getUserInfo();\n        if (userInfo) {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n            } else {\n                this._publicKey = null;\n            }\n        } else {\n            this._publicKey = null;\n        }\n\n        this.auth.on('connect', (userInfo: UserInfo) => {\n            const wallet = userInfo.wallets.find((w) => w.chain_name === 'solana' && w.public_address.length > 0);\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                this.events.emit('connect', this._publicKey);\n            }\n        });\n        this.auth.on('disconnect', () => {\n            this._publicKey = null;\n            this.events.emit('disconnect');\n        });\n        if (typeof window !== 'undefined' && window.particle) {\n            window.particle.solanaWallet = this;\n        }\n    }\n\n    get version() {\n        return getVersion();\n    }\n\n    on(event: string, listener: any): void {\n        this.events.on(event, listener);\n    }\n\n    once(event: string, listener: any): void {\n        this.events.once(event, listener);\n    }\n\n    off(event: string, listener: any): void {\n        this.events.off(event, listener);\n    }\n\n    removeListener(event: string, listener: any): void {\n        this.events.removeListener(event, listener);\n    }\n\n    get connecting(): boolean {\n        return this._connecting;\n    }\n\n    get connected(): boolean {\n        return this._publicKey !== null;\n    }\n\n    get publicKey(): PublicKey | null {\n        return this._publicKey;\n    }\n\n    public async connect(config?: LoginOptions): Promise<void> {\n        try {\n            this._connecting = true;\n            let wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            }\n            await this.auth.login(config);\n            wallet = this.auth.getWallet();\n            if (wallet) {\n                this._publicKey = new PublicKey(wallet.public_address);\n                return Promise.resolve();\n            } else {\n                return Promise.reject('wallet create failed');\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        } finally {\n            this._connecting = false;\n        }\n    }\n\n    public async disconnect(): Promise<void> {\n        await this.auth.logout();\n        this._publicKey = null;\n        return Promise.resolve();\n    }\n\n    public async signTransaction(transaction: Transaction): Promise<Transaction> {\n        const signature = await this.auth.sign(\n            'signTransaction',\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n        return Transaction.from(Buffer.from(signature, 'base64'));\n    }\n\n    public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n        const signatures = await this.auth.signAllTransactions(\n            transactions.map((tx) =>\n                bs58.encode(tx.serialize({ requireAllSignatures: false, verifySignatures: false }))\n            )\n        );\n        return signatures.map((signed: string) => Transaction.from(Buffer.from(signed, 'base64')));\n    }\n\n    public async signAndSendTransaction(transaction: Transaction): Promise<string> {\n        return this.auth.sendTransaction(\n            bs58.encode(transaction.serialize({ requireAllSignatures: false, verifySignatures: false }))\n        );\n    }\n\n    public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n        const signature = await this.auth.sign('signMessage', bs58.encode(message));\n        return Buffer.from(signature, 'base64');\n    }\n\n    public getConnection(config?: ConnectionConfig): Connection {\n        const url = `${rpcUrl()}/solana`;\n        return new Connection(\n            `${url}?chainId=${this.auth.getChainId()}&projectUuid=${this.auth.config.projectId}&projectKey=${\n                this.auth.config.clientKey\n            }`,\n            {\n                commitment: config?.commitment,\n                wsEndpoint: config?.wsEndpoint,\n                httpHeaders: {\n                    Authorization: this.auth.basicCredentials(),\n                },\n                fetch: config?.fetch,\n                fetchMiddleware: config?.fetchMiddleware,\n                disableRetryOnRateLimit: config?.disableRetryOnRateLimit,\n                confirmTransactionInitialTimeout: config?.confirmTransactionInitialTimeout,\n            }\n        );\n    }\n}\n","export function getVersion(): string {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const packages = require('../package.json');\n    return `web_${packages.version}`;\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","_Buffer","module","ALPHABET","BASE_MAP","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","string","buf","reversed","reverse","hex","BigInt","concat","num","width","padStart","__createBinding","this","o","m","k","k2","defineProperty","enumerable","get","__setModuleDefault","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","__importStar","mod","__esModule","result","__importDefault","deserializeUnchecked","deserialize","serialize","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","default","INITIAL_LENGTH","message","super","fieldPath","originalMessage","addToFieldPath","fieldName","splice","join","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","writeFixedArray","array","writeArray","fn","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","_len","args","_key","apply","code","indexOf","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","len","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","schema","fieldType","writer","item","kind","type","forEach","val","serializeStruct","error","obj","borshSerialize","structSchema","map","_ref","field","deserializeField","reader","arr","Map","set","deserializeStruct","classType","borshDeserialize","basex","uuid","generateRequest","ClientBrowser","callServer","options","reviver","replacer","generator","version","notificationIdNull","request","method","params","id","callback","self","isBatch","hasCallback","err","JSON","stringify","response","_parseResponse","responseText","parse","isError","res","isNotError","filter","jsonrpc","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_utils","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","s","t","p","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","address","_a","generate_request_id","dataPack","_a$autoconnect","autoconnect","_a$reconnect","reconnect","_a$reconnect_interval","reconnect_interval","_a$max_reconnects","max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","DefaultDataPack","_connect","socket","timeout","ws_opts","_this2","Promise","resolve","reject","send","promise","setTimeout","_login","mark","_callee","resp","wrap","_context","prev","next","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","event","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","data","close","_this4","clearTimeout","addEventListener","emit","ArrayBuffer","notification","listeners","keys","then","_ref2","reason","EventEmitter","WebSocketBrowserImpl","protocols","window","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","cb","listener","createError","details","errors","ReferenceError","asyncGeneratorStep","gen","_next","_throw","arg","info","done","instance","Constructor","toPropertyKey","_defineProperties","props","descriptor","configurable","writable","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","_typeof","assertThisInitialized","_regeneratorRuntime","n","Symbol","a","iterator","asyncIterator","u","toStringTag","define","Generator","Context","makeInvokeMethod","tryCatch","h","l","f","y","GeneratorFunction","GeneratorFunctionPrototype","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","_sent","dispatchException","resultName","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","awrap","async","pop","rval","handle","complete","finish","delegateYield","_setPrototypeOf","toPrimitive","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","_1n","_2n","isBytes","hexes","_","bytesToHex","bytes","hexToNumber","asciis","_0","_9","_A","_F","_f","asciiToBase16","char","hexToBytes","hl","al","ai","hi","n1","n2","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","concatBytes","pad","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reseed","seed","out","sl","genUntil","pred","validatorFns","bigint","function","boolean","stringOrUint8Array","isSafeInteger","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","isOptional","checkVal","entries","_0n","_3n","_4n","_5n","_8n","power","modulo","pow2","invert","number","q","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","bitLen","isLE","redef","BITS","BYTES","sqrtP","freeze","MASK","is0","isOdd","lhs","rhs","add","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","tmp","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","toBytes","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","wNAF","constTimeNegate","condition","negate","opts","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","validateField","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","toInv","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","msg","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","R","verify","sig","publicKey","SB","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","sha512","ed25519","ed25519_domain","utf8ToBytes","ELL2_C1","FpSqrtEven","StructError","failure","failures","cached","rest","path","_cached","isObject","print","toFailure","struct","branch","refinement","toFailures","run","coerce","coercer","valid","validator","ts","Set","refiner","Struct","assert","validate","is","tuples","tuple","input","shiftIterator","Element","Class","literal","constant","description","never","nullable","optional","record","Key","Value","Elements","Never","Structs","first","unknown","b2n","h2b","DER","Err","_parseInt","toSig","sBytes","rBytesLeft","hexFromSig","parseInt","shl","rhl","rl","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","_isCompressed","tail","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","lengths","includes","assertPrjPoint","px","py","pz","privateKey","left","right","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","weierstrass","hmac","bits2int","bits2int_modN","lowS","compressedLen","uncompressedLen","invN","cat","numToNByteStr","isBiggerThanHalfOrder","slcNum","to","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getSharedSecret","privateA","publicB","drbg","signature","_Point$BASE$multiplyA","sg","_sig","derError","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","sha256","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","byteLength","properties","SOLANA_SCHEMA","decodeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","unique","eq","toBase58","toJSON","toArrayLike","zeroPad","createWithSeed","fromPublicKey","programId","publicKeyBytes","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","findProgramAddress","pubkeyData","_class","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","readonlySigners","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","_len2","_key2","seen","_len3","_key3","uniqueSigners","signer","_partialSign","partialSign","_len4","_key4","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","missing","invalid","config","sigErrors","errorMessage","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","_ref13","customMessage","fetchImpl","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","url","rpc","createRpc","underlyingSocket","_this$underlyingSocke","readyState","notify","_this$underlyingSocke2","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_requestPromises$requ","_buildArgs","requestHash","fastStableStringify$1","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","unsafeRes","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","_config$abortSignal","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","_ref14","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","_ref15","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref16","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_ref17","timeoutId","timeoutMs","TIMED_OUT","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","_config$lockedWritabl","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","_ref18","getParsedBlock","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","_ref19","_ref20","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_ref21","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","clientSubscriptionId","_this$_subscriptionSt","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_class2","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","website","keybaseUsername","SolanaWallet","auth","isParticleNetwork","icon","events","_connecting","userInfo","getUserInfo","wallet","wallets","w","chain_name","public_address","_publicKey","userInfo2","particle","solanaWallet","packages","init_package","__toCommonJS","package_exports","once","off","removeListener","connecting","connected","__async","getWallet","login","disconnect","logout","signTransaction","Buffer2","signAllTransactions","tx","signed","signAndSendTransaction","signMessage","getConnection","rpcUrl","getChainId","projectId","clientKey","Authorization","basicCredentials","min","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","finished","decoderError","opt_code_point","DEFAULT_ENCODING","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}